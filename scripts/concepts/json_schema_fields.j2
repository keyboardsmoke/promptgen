{
    "$id": {"type": "string", "summary": "Unique schema identifier."},
    "$schema": {"type": "string", "summary": "Meta-schema URI."},
    "$ref": {"type": "string", "summary": "Reference to another schema."},
    "$comment": {"type": "String", "summary": "Schema comment."},
    "$defs": {"type": "object", "summary": "Inline schema definitions."},
    "$anchor": {"type": "string", "summary": "Internal schema reference."},
    "$dynamicAnchor": {"type": "string", "summary": "Dynamic reference point."},
    "$dynamicRef": {"type": "string", "summary": "Dynamic schema reference."},
    "$vocabulary": {"type": "object", "summary": "Declared vocabularies."}
    "allOf": {"type": "array of schemas", "summary": "Must match all schemas."},
    "anyOf": {"type": "array of schemas", "summary": "Must match at least one schema."},
    "oneOf": {"type": "array of schemas", "summary": "Must match exactly one schema."},
    "if": {"type": "Schema", "summary": "Conditional schema."},
    "then": {"type": "Schema", "summary": "Applied if 'if' matches."},
    "else": {"type": "Schema", "summary": "Applied if 'if' does not match."},
    "not": {"type": "Schema", "summary": "Must not match schema."},
    "properties": {"type": "object", "summary": "Schemas for object properties."},
    "additionalProperties": {"type": "Schema or boolean", "summary": "Schema for extra properties."},
    "patternProperties": {"type": "object", "summary": "Schemas for regex-matched properties."},
    "dependentSchemas": {"type": "object", "summary": "Schemas based on properties."},
    "propertyNames": {"type": "Schema", "summary": "Schema for property names."},
    "contains": {"type": "Schema", "summary": "Must contain matching item."},
    "items": {"type": "Schema or array of schemas", "summary": "Schema for all array items."},
    "prefixItems": {"type": "array of schemas", "summary": "Schemas for specific item indices."}
    "type": {"type": "string or array", "summary": "Allowed instance types."},
    "enum": {"type": "array", "summary": "Allowed values."},
    "const": {"type": "any", "summary": "Must equal value."},
    "maxLength": {"type": "Integer", "summary": "Max string length."},
    "minLength": {"type": "Integer", "summary": "Min string length."},
    "pattern": {"type": "string", "summary": "Regex pattern for strings."},
    "exclusiveMaximum": {"type": "number", "summary": "Must be less than value."},
    "exclusiveMinimum": {"type": "number", "summary": "Must be greater than value."},
    "maximum": {"type": "number", "summary": "Max value."},
    "minimum": {"type": "number", "summary": "Min value."},
    "multipleOf": {"type": "number", "summary": "Must be multiple of value."},
    "dependentRequired": {"type": "object", "summary": "Required if other properties exist."},
    "maxProperties": {"type": "Integer", "summary": "Max number of properties."},
    "minProperties": {"type": "Integer", "summary": "Min number of properties."}
}